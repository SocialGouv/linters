// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@typescript-eslint/naming-convention incorrect 1`] = `
Object {
  "errorCount": 34,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "results": Array [
    Object {
      "errorCount": 34,
      "filePath": StringContaining "e2e/@typescript-eslint/naming-convention/incorrect.ts",
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "messages": Array [
        Object {
          "column": 9,
          "endColumn": 19,
          "endLine": 8,
          "line": 8,
          "message": "Variable name \`snake_case\` must match one of the following formats: camelCase, UPPER_CASE, PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 9,
          "endColumn": 19,
          "endLine": 9,
          "line": 9,
          "message": "Variable name \`camelCase_\` must match one of the following formats: camelCase, UPPER_CASE, PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 15,
          "endLine": 14,
          "line": 14,
          "message": "Object Literal Property name \`PascalCase\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 15,
          "endLine": 15,
          "line": 15,
          "message": "Object Literal Property name \`snake_case\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 12,
          "endColumn": 22,
          "endLine": 20,
          "line": 20,
          "message": "Function name \`snake_case\` must match one of the following formats: camelCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 12,
          "endColumn": 22,
          "endLine": 21,
          "line": 21,
          "message": "Function name \`UPPER_CASE\` must match one of the following formats: camelCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 12,
          "endColumn": 23,
          "endLine": 22,
          "line": 22,
          "message": "Function name \`_UPPER_CASE\` trimmed as \`UPPER_CASE\` must match one of the following formats: camelCase",
          "messageId": "doesNotMatchFormatTrimmed",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 12,
          "endColumn": 22,
          "endLine": 23,
          "line": 23,
          "message": "Function name \`PascalCase\` must match one of the following formats: camelCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 12,
          "endColumn": 23,
          "endLine": 24,
          "line": 24,
          "message": "Function name \`_PascalCase\` trimmed as \`PascalCase\` must match one of the following formats: camelCase",
          "messageId": "doesNotMatchFormatTrimmed",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 24,
          "endColumn": 34,
          "endLine": 28,
          "line": 28,
          "message": "Parameter name \`PascalCase\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 51,
          "endColumn": 61,
          "endLine": 28,
          "line": 28,
          "message": "Parameter name \`snake_case\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 19,
          "endColumn": 29,
          "endLine": 29,
          "line": 29,
          "message": "Object Literal Property name \`PascalCase\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 31,
          "endColumn": 41,
          "endLine": 29,
          "line": 29,
          "message": "Object Literal Property name \`snake_case\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 15,
          "endLine": 32,
          "line": 32,
          "message": "Object Literal Property name \`PascalCase\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 15,
          "endLine": 33,
          "line": 33,
          "message": "Object Literal Property name \`snake_case\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 24,
          "endColumn": 42,
          "endLine": 40,
          "line": 40,
          "message": "Parameter Property name \`snake_case\` must match one of the following formats: camelCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 24,
          "endColumn": 42,
          "endLine": 41,
          "line": 41,
          "message": "Parameter Property name \`camelCase_\` must match one of the following formats: camelCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 19,
          "endColumn": 30,
          "endLine": 45,
          "line": 45,
          "message": "Class Method name \`_snake_case\` trimmed as \`snake_case\` must match one of the following formats: camelCase",
          "messageId": "doesNotMatchFormatTrimmed",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 9,
          "endColumn": 20,
          "endLine": 47,
          "line": 47,
          "message": "Class name \`_PascalCase\` must match one of the following formats: PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 9,
          "endColumn": 19,
          "endLine": 48,
          "line": 48,
          "message": "Class name \`UPPER_CASE\` must match one of the following formats: PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 9,
          "endColumn": 19,
          "endLine": 49,
          "line": 49,
          "message": "Class name \`snake_case\` must match one of the following formats: PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 13,
          "endColumn": 22,
          "endLine": 53,
          "line": 53,
          "message": "Interface name \`camelCase\` must match one of the following formats: PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 15,
          "endLine": 54,
          "line": 54,
          "message": "Type Property name \`PascalCase\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 5,
          "endColumn": 15,
          "endLine": 55,
          "line": 55,
          "message": "Type Property name \`snake_case\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 13,
          "endColumn": 23,
          "endLine": 57,
          "line": 57,
          "message": "Interface name \`UPPER_CASE\` must match one of the following formats: PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 13,
          "endColumn": 23,
          "endLine": 60,
          "line": 60,
          "message": "Interface name \`snake_case\` must match one of the following formats: PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 8,
          "endColumn": 19,
          "endLine": 66,
          "line": 66,
          "message": "Type Alias name \`_PascalCase\` must match one of the following formats: PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 8,
          "endColumn": 18,
          "endLine": 67,
          "line": 67,
          "message": "Type Alias name \`UPPER_CASE\` must match one of the following formats: PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 8,
          "endColumn": 18,
          "endLine": 68,
          "line": 68,
          "message": "Type Alias name \`snake_case\` must match one of the following formats: PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 8,
          "endColumn": 17,
          "endLine": 69,
          "line": 69,
          "message": "Type Alias name \`camelCase\` must match one of the following formats: PascalCase",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 12,
          "endColumn": 22,
          "endLine": 74,
          "line": 74,
          "message": "Class Property name \`snake_case\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormat",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 12,
          "endColumn": 23,
          "endLine": 76,
          "line": 76,
          "message": "Class Property name \`_PascalCase\` trimmed as \`PascalCase\` must match one of the following formats: camelCase, UPPER_CASE",
          "messageId": "doesNotMatchFormatTrimmed",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 25,
          "endColumn": 35,
          "endLine": 81,
          "line": 81,
          "message": "Type Parameter name \`PascalCase\` must have one of the following prefixes: T",
          "messageId": "missingAffix",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
        Object {
          "column": 25,
          "endColumn": 36,
          "endLine": 84,
          "line": 84,
          "message": "Type Parameter name \`TUPPER_CASE\` trimmed as \`UPPER_CASE\` must match one of the following formats: PascalCase",
          "messageId": "doesNotMatchFormatTrimmed",
          "nodeType": "Identifier",
          "ruleId": "@typescript-eslint/naming-convention",
          "severity": 2,
        },
      ],
      "source": "/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable @typescript-eslint/no-extraneous-class */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-unused-vars-experimental */
/* eslint-disable no-inner-declarations */

{
  const snake_case = 0;
  const camelCase_ = 0;
}

{
  const camelCase = {
    PascalCase: \\"PascalCase\\",
    snake_case: \\"snake_case\\",
  };
}

{
  function snake_case() {}
  function UPPER_CASE() {}
  function _UPPER_CASE() {}
  function PascalCase() {}
  function _PascalCase() {}
}

{
  function camelCase({ PascalCase = \\"PascalCase\\", snake_case = \\"snake_case\\" }) {
    console.log({ PascalCase, snake_case });
  }
  camelCase({
    PascalCase: \\"PascalCase\\",
    snake_case: \\"snake_case\\",
  });
}

{
  class PascalCase {
    constructor(
      private readonly snake_case: string,
      private readonly camelCase_: string,
      public readonly _camelCase: string
    ) {}

    public static _snake_case() {}
  }
  class _PascalCase {}
  class UPPER_CASE {}
  class snake_case {}
}

{
  interface camelCase {
    PascalCase: string;
    snake_case: string;
  }
  interface UPPER_CASE {
    camelCase: string;
  }
  interface snake_case {
    camelCase: string;
  }
}

{
  type _PascalCase = string;
  type UPPER_CASE = string;
  type snake_case = string;
  type camelCase = string;
}

{
  class PascalCase {
    public snake_case = \\"\\";

    public _PascalCase = \\"\\";
  }
}

{
  interface PascalCaseI<PascalCase> extends ReadonlyArray<string> {
    camelCase: PascalCase;
  }
  interface PascalCase2<TUPPER_CASE> extends ReadonlyArray<string> {
    camelCase: TUPPER_CASE;
  }
}
",
      "warningCount": 0,
    },
  ],
  "usedDeprecatedRules": Array [],
  "warningCount": 0,
}
`;
